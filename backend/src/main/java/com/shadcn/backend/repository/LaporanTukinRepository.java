package com.shadcn.backend.repository;

import com.shadcn.backend.model.LaporanTukin;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;

@Repository
public interface LaporanTukinRepository extends JpaRepository<LaporanTukin, Long> {
    
    @Query("SELECT l FROM LaporanTukin l JOIN FETCH l.generatedBy ORDER BY l.tanggalGenerate DESC")
    Page<LaporanTukin> findAllWithGeneratedBy(Pageable pageable);
    
    @Query("SELECT l FROM LaporanTukin l JOIN FETCH l.generatedBy WHERE " +
           "(:bulan IS NULL OR l.bulan = :bulan) AND " +
           "(:tahun IS NULL OR l.tahun = :tahun) AND " +
           "(:status IS NULL OR LOWER(l.status) LIKE LOWER(CONCAT('%', :status, '%'))) " +
           "ORDER BY l.tanggalGenerate DESC")
    Page<LaporanTukin> findWithFilters(@Param("bulan") Integer bulan,
                                      @Param("tahun") Integer tahun,
                                      @Param("status") String status,
                                      Pageable pageable);
    
    // Admin report methods - only show reports generated by admin/verificator (reports without pegawaiId in title)
    @Query("SELECT l FROM LaporanTukin l JOIN FETCH l.generatedBy WHERE " +
           "(:bulan IS NULL OR l.bulan = :bulan) AND " +
           "(:tahun IS NULL OR l.tahun = :tahun) AND " +
           "(:status IS NULL OR LOWER(l.status) LIKE LOWER(CONCAT('%', :status, '%'))) AND " +
           "(l.isPersonalReport = false OR l.isPersonalReport IS NULL) " +
           "ORDER BY l.tanggalGenerate DESC")
    Page<LaporanTukin> findAdminReportsWithFilters(@Param("bulan") Integer bulan,
                                                  @Param("tahun") Integer tahun,
                                                  @Param("status") String status,
                                                  Pageable pageable);
    
    List<LaporanTukin> findByBulanAndTahunOrderByTanggalGenerateDesc(Integer bulan, Integer tahun);
    
    @Query("SELECT DISTINCT l.tahun FROM LaporanTukin l ORDER BY l.tahun DESC")
    List<Integer> findDistinctYears();
    
    // Delete methods
    long deleteByBulanAndTahun(Integer bulan, Integer tahun);
    
    // Personal report methods - hanya menampilkan laporan yang digenerate oleh pegawai itu sendiri
    @Query("SELECT l FROM LaporanTukin l JOIN FETCH l.generatedBy WHERE l.generatedBy.id = :pegawaiId AND (l.isPersonalReport = true) ORDER BY l.tanggalGenerate DESC")
    Page<LaporanTukin> findByGeneratedByIdOrderByTanggalGenerateDesc(@Param("pegawaiId") Long pegawaiId, Pageable pageable);
    
    @Query("SELECT l FROM LaporanTukin l JOIN FETCH l.generatedBy WHERE l.generatedBy.id = :pegawaiId AND l.bulan = :bulan AND (l.isPersonalReport = true) ORDER BY l.tanggalGenerate DESC")
    Page<LaporanTukin> findByBulanAndGeneratedByIdOrderByTanggalGenerateDesc(@Param("bulan") Integer bulan, @Param("pegawaiId") Long pegawaiId, Pageable pageable);
    
    @Query("SELECT l FROM LaporanTukin l JOIN FETCH l.generatedBy WHERE l.generatedBy.id = :pegawaiId AND l.tahun = :tahun AND (l.isPersonalReport = true) ORDER BY l.tanggalGenerate DESC")
    Page<LaporanTukin> findByTahunAndGeneratedByIdOrderByTanggalGenerateDesc(@Param("tahun") Integer tahun, @Param("pegawaiId") Long pegawaiId, Pageable pageable);
    
    @Query("SELECT l FROM LaporanTukin l JOIN FETCH l.generatedBy WHERE l.generatedBy.id = :pegawaiId AND LOWER(l.status) LIKE LOWER(CONCAT('%', :status, '%')) AND (l.isPersonalReport = true) ORDER BY l.tanggalGenerate DESC")
    Page<LaporanTukin> findByStatusAndGeneratedByIdOrderByTanggalGenerateDesc(@Param("status") String status, @Param("pegawaiId") Long pegawaiId, Pageable pageable);
    
    @Query("SELECT l FROM LaporanTukin l JOIN FETCH l.generatedBy WHERE l.generatedBy.id = :pegawaiId AND l.bulan = :bulan AND l.tahun = :tahun AND (l.isPersonalReport = true) ORDER BY l.tanggalGenerate DESC")
    Page<LaporanTukin> findByBulanAndTahunAndGeneratedByIdOrderByTanggalGenerateDesc(@Param("bulan") Integer bulan, @Param("tahun") Integer tahun, @Param("pegawaiId") Long pegawaiId, Pageable pageable);
    
    @Query("SELECT l FROM LaporanTukin l JOIN FETCH l.generatedBy WHERE l.generatedBy.id = :pegawaiId AND l.bulan = :bulan AND l.tahun = :tahun AND LOWER(l.status) LIKE LOWER(CONCAT('%', :status, '%')) AND (l.isPersonalReport = true) ORDER BY l.tanggalGenerate DESC")
    Page<LaporanTukin> findByBulanAndTahunAndStatusAndGeneratedByIdOrderByTanggalGenerateDesc(
            @Param("bulan") Integer bulan, @Param("tahun") Integer tahun, @Param("status") String status, @Param("pegawaiId") Long pegawaiId, Pageable pageable);
    
    @Query("SELECT l FROM LaporanTukin l WHERE l.id = :id AND l.generatedBy.id = :pegawaiId AND (l.isPersonalReport = true)")
    Optional<LaporanTukin> findByIdAndGeneratedById(@Param("id") Long id, @Param("pegawaiId") Long pegawaiId);
}
